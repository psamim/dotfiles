call plug#begin('~/.vim/plugged')
" JS
Plug 'leafgarland/typescript-vim'
Plug 'MaxMEllon/vim-jsx-pretty'
Plug 'jparise/vim-graphql'
Plug 'digitaltoad/vim-pug'
" Plug 'Quramy/vim-js-pretty-template'
" Plug 'pangloss/vim-javascript'
" Plug 'othree/yajs.vim'
" Plug 'mxw/vim-jsx'

" Fast select by ENTER
Plug 'gcmt/wildfire.vim'

" fzf
Plug '/usr/local/opt/fzf'
Plug 'junegunn/fzf.vim'
" Plug 'antoinemadec/coc-fzf'
" Plug 'yuki-ycino/fzf-preview.vim', { 'branch': 'release', 'do': ':UpdateRemotePlugins' }

" Other
Plug 'norcalli/nvim-colorizer.lua'
Plug 'RRethy/vim-illuminate'
Plug 'numToStr/Comment.nvim'
" Plug "tomtom/tcomment_vim"
" Plug 'tpope/vim-commentary'
" Plug 'JoosepAlviste/nvim-ts-context-commentstring'
Plug 'airblade/vim-gitgutter'
Plug 'lukas-reineke/indent-blankline.nvim'
Plug 'skywind3000/asyncrun.vim'
Plug 'ledger/vim-ledger'
Plug 'lambdalisue/suda.vim'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'thaerkh/vim-workspace'
Plug 'yaegassy/coc-tailwindcss3', {'do': 'yarn install --frozen-lockfile'}
Plug 'tpope/vim-repeat'
Plug 'simnalamburt/vim-mundo'
Plug 'tpope/vim-surround'
Plug 'farmergreg/vim-lastplace'
Plug 'LnL7/vim-nix'
" cycle through lists of keywords such as true/false, yes/no
" Plug 'Konfekt/vim-CtrlXA'
Plug 'yuttie/comfortable-motion.vim'
Plug 'nelstrom/vim-visual-star-search'
" Automatic closing of quotes, parenthesis, brackets, etc.,
Plug 'Raimondi/delimitMate'
Plug 'tommcdo/vim-exchange'
Plug 'romgrk/lib.kom'
" highlight for a unique character in every word on a line
Plug 'unblevable/quick-scope'
Plug 'kyazdani42/nvim-tree.lua'
Plug 'nvim-tree/nvim-web-devicons'
Plug 'nvim-lua/plenary.nvim'
" Plug 'Chiel92/vim-autoformat'
Plug 'sbdchd/neoformat'
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}  " We recommend updating the parsers on update
Plug 'qpkorr/vim-bufkill'
Plug 'karb94/neoscroll.nvim'
Plug 'nvim-lua/plenary.nvim'
Plug 'severin-lemaignan/vim-minimap'
Plug 'nvim-telescope/telescope.nvim'
Plug 'nvim-telescope/telescope-frecency.nvim'
Plug 'tami5/sqlite.lua'
Plug 'isobit/vim-caddyfile'
Plug 'godlygeek/tabular'
Plug 'preservim/vim-markdown'
" Plug 'Valloric/ListToggle'
" Plug 'AndrewRadev/tagalong.vim'
" Plug 'machakann/vim-sandwich'
" Plug 'machakann/vim-highlightedyank'
" Plug 'embear/vim-localvimrc'
" Plug 'rhysd/vim-grammarous'
" Plug 'AlphaMycelium/pathfinder.vim'
" Plug 'ipod825/vim-netranger'
" Plug 'ActivityWatch/aw-watcher-vim'
" Plug 'diepm/vim-rest-console'
" Plug 'Valloric/MatchTagAlways'

" Status Line
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" Git
Plug 'tpope/vim-fugitive'
Plug 'shumphrey/fugitive-gitlab.vim'
" Extend fugitive.vim to support Bitbucket URLs in :Gbrowse
Plug 'tommcdo/vim-fubitive'
" Enables :GBrowse from fugitive.vim to open GitHub URLs
Plug 'tpope/vim-rhubarb'
Plug 'iberianpig/tig-explorer.vim'
" Plug 'NeogitOrg/neogit'
Plug 'kdheepak/lazygit.nvim'

" Adds <leader>gm to display diff (d) and history
Plug 'rhysd/git-messenger.vim'
" Plug 'APZelos/blamer.nvim'
" Plug 'ttys3/nvim-blamer.lua'
Plug 'junegunn/vim-emoji'


" extends " and @ in normal mode and <CTRL-R> in insert mode so you can see the contents of the registers.
Plug 'junegunn/vim-peekaboo'

" Adds <leader>-r and <leader>-R
Plug 'maxbrunsfeld/vim-yankstack'

" Themes 
Plug 'sainnhe/gruvbox-material'
" Plug 'shaunsingh/nord.nvim'
" Plug 'projekt0n/github-nvim-theme'
" Plug 'sainnhe/everforest'
Plug 'xiyaowong/nvim-transparent'
Plug 'ful1e5/onedark.nvim'

" Tab line
Plug 'akinsho/bufferline.nvim', { 'tag': '*' }
" Plug 'pacha/vem-tabline'
" Plug 'romgrk/barbar.nvim'

" Snippets
Plug 'honza/vim-snippets'
Plug 'diepm/vim-rest-console'
Plug 'Exafunction/codeium.vim', { 'branch': 'main' }
Plug 'rmagatti/auto-session'
call plug#end()

set number
syntax enable
set background=dark
set termguicolors

" set titlestring=%{expand(\"%:p:h\")}
set titlestring=%{split(getcwd(),'\/')[-1]}
set title


" Suda
let g:suda_smart_edit = 1

" let g:grammarous#languagetool_cmd = 'languagetool'
" nmap <silent> gra <Plug>(grammarous-fixall)

" " CtrlpZ, fasd intergration
" let g:ctrlp_map = ''
" let g:ctrlp_extensions = ['Z']

" let g:localvimrc_enable=1

" vim-workspace
let g:workspace_session_name = '.session.vim'
let g:workspace_autosave = 0

command! -nargs=* Z :call Z(<f-args>)
function! Z(...)
  let cmd = 'fasd -d -e printf'
  for arg in a:000
    let cmd = cmd . ' ' . arg
  endfor
  let path = system(cmd)
  if isdirectory(path)
    echo path
    exec 'cd' fnameescape(path)
  endif
endfunction

augroup TerminalStuff
    au!
    autocmd TermOpen * nnoremap <buffer> <A-q> <Esc>:bdelete!<CR>
    autocmd BufWinEnter,WinEnter * if &buftype == 'terminal' | silent! normal i | endif
    autocmd TermOpen * setlocal nonumber norelativenumber noshowcmd noruler nospell
    autocmd TermOpen * echo ""
augroup END

" Other
filetype plugin indent on
set autowrite
" set spell

if has('nvim')
  let $VISUAL = 'nvr -cc split --remote-wait'
endif

" Cd to current file directory
command CDC cd %:p:h

" vim-bufferline
 " let g:bufferline_echo = 0
 " let g:bufferline_show_bufnr = 0

" Color terminal curser
" :hi! TermCursorNC ctermfg=15 guifg=#fdf6e3 ctermbg=14 guibg=#93a1a1 cterm=NONE gui=NONE

"" Enable hidden buffers
set hidden

"" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase

"" Directories for swp files
set nobackup
set noswapfile
set nowritebackup

set fileformats=unix,dos,mac

" IndentLine
let g:indentLine_enabled = 1
" let g:indentLine_concealcursor = 0
" let g:indentLine_char = 'â”†'
" let g:indentLine_faster = 1

" Indent
set tabstop=2
set softtabstop=0
set shiftwidth=2
set expandtab

" Mouse integration
set mousemodel=popup
set mouse=a

" Maps
let mapleader = " "
nmap <S-w> :w<CR>
nmap <leader>fs :w<CR>
nmap <S-q> :w<CR>:bd<CR>
nmap <leader>qs :w\|bd<cr>
nmap <leader>1 :on<CR>
inoremap jj <Esc>

" fzf
cnoremap <C-P> <C-R>=expand("%:p:h") . "/" <CR>
nnoremap <silent> <leader>bb :Telescope buffers<CR>
nnoremap <silent> <leader>bp :BufferLinePick<CR>
" nmap <leader>o :History<CR>
nmap <leader>o :Telescope oldfiles<CR>
" nmap <leader>p :GFiles<CR>
nmap <leader>p :Telescope find_files<CR>
let g:fzf_preview_use_dev_icons = 1
nmap <C-p> :GFiles<CR>
nmap <leader>/ :Telescope live_grep<CR>
nmap <leader>* :Telescope grep_string<CR>
nmap <leader><leader> :Telescope commands<CR>
autocmd! FileType fzf tnoremap <buffer> <esc> <c-c>
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.pyc,__pycache__

" command! -bang -nargs=* Rg
"   \ call fzf#vim#grep(
"   \   'rg --column --line-number --no-heading --color=always --smart-case '.shellescape(<q-args>), 1,
"   \   <bang>0 ? fzf#vim#with_preview('up:60%')
"   \           : fzf#vim#with_preview('right:50%:hidden', '?'),
"   \   <bang>0)

" command! -bang -nargs=* Ag
"   \ call fzf#vim#ag(<q-args>,
"   \                 <bang>0 ? fzf#vim#with_preview('up:60%')
"   \                         : fzf#vim#with_preview('right:50%:hidden', '?'),
"   \                 <bang>0)


" Hide statusline in fzf
" autocmd! FileType fzf
" autocmd  FileType fzf set laststatus=0 noshowmode noruler
"   \| autocmd BufLeave <buffer> set laststatus=2 showmode ruler

" File manager
" nnoremap <leader>d :Ranger<CR>
" nnoremap <leader>d :NERDTreeFind<CR>
 nnoremap <leader>d :NvimTreeFindFileToggle<CR>
" let g:ranger_replace_netrw = 1

" Split
noremap <Leader>h :<C-u>split<CR>
noremap <Leader>v :<C-u>vsplit<CR>


" vim-javascript
let g:jsx_ext_required = 0
" let g:javascript_plugin_flow = 1

" Navigation
nnoremap <A-j> <C-w>h
nnoremap <A-k> <C-w>l
" nnoremap <A-j> <C-w>j
" nnoremap <A-k> <C-w>k
inoremap <A-q> <Esc>:BD<CR>
nnoremap <A-q> <Esc>:BD<CR>
nnoremap <leader><tab> :b#<cr>
" nnoremap <A-l> :bnext<CR>
" nnoremap <A-h> :bprev<CR>
nnoremap <A-l> :BufferLineCycleNext<CR>
nnoremap <A-h> :BufferLineCyclePrev<CR>

" Tig
nnoremap <leader>gs :LazyGit<cr>

" Nvim specific
if has('nvim')
  set inccommand=nosplit
endif

" Teminal mode, make it like tmux
if has('nvim')
  nnoremap <A-n> :terminal<CR>i
  nnoremap <A-m> :let $VIM_DIR=expand('%:p:h')<CR>:terminal<CR>icd $VIM_DIR<CR>
  inoremap <A-h> <C-\><C-N><C-w>h
  inoremap <A-j> <C-\><C-N><C-w>j
  inoremap <A-k> <C-\><C-N><C-w>k
  inoremap <A-l> <C-\><C-N><C-w>l
  tnoremap <Esc><Esc> <C-\><C-n>
  " tnoremap <M-[> <Esc>
  " tnoremap <C-v><Esc> <Esc>
  tnoremap <A-h> <C-\><C-N><C-w>h
  tnoremap <A-j> <C-\><C-N><C-w>j
  tnoremap <A-k> <C-\><C-N><C-w>k
  tnoremap <A-l> <C-\><C-N><C-w>l
  tnoremap <A-l> <C-\><C-n>:bnext<CR>
  tnoremap <A-h> <C-\><C-n>:bprev<CR>
  tnoremap <A-q> <C-\><C-n>:bdelete!<CR>
  tnoremap <A-n> <C-\><C-n>:terminal<CR>i
endif


" Search mappings: These will make it so that going to the next one in a
" search will center on the line it's found in.
nnoremap n nzzzv
nnoremap N Nzzzv

"" no one is really happy until you have this shortcuts
cnoreabbrev W! w!
cnoreabbrev Q! q!
cnoreabbrev Qall! qall!
cnoreabbrev Wq wq
cnoreabbrev Wa wa
cnoreabbrev wQ wq
cnoreabbrev WQ wq
cnoreabbrev W w
cnoreabbrev Q q
cnoreabbrev z Z
cnoreabbrev j Z
cnoreabbrev Qall qall

nmap <leader>r <Plug>yankstack_substitute_older_paste
nmap <leader>R <Plug>yankstack_substitute_newer_paste

" Disable visualbell
set noerrorbells visualbell t_vb=
if has('autocmd')
  autocmd GUIEnter * set visualbell t_vb=
endif

" Clipboard
noremap <C-c> "+y<CR>
inoremap <C-v> <Esc>l"+gPa

"" Vmap for maintain Visual Mode after shifting > and <
vmap < <gv
vmap > >gv

" Airline
" let g:airline_theme='minimalist'
let g:airline_section_x=''
let g:airline_section_y=''
" let g:airline_section_warning=''
" let g:airline#extensions#ale#enabled = 1
" let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#ignore_bufadd_pat =
  \ 'gundo|undotree|vimfiler|tagbar|nerd_tree|startify|!'
let g:airline#extensions#tabline#buffers_label = ''
let g:airline#extensions#tabline#buffer_min_count = 2  
let g:airline#extensions#tabline#tab_min_count = 2    
let g:airline_section_error = '%{airline#util#wrap(airline#extensions#coc#get_error(),0)}'
let g:airline_section_warning = '%{airline#util#wrap(airline#extensions#coc#get_warning(),0)}'
set noshowmode

lua require'colorizer'.setup()

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: There's always complete item selected by default, you may want to enable
" no select by `"suggest.noselect": true` in your configuration file.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
" <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
if exists('*complete_info')
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=100

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=number

" coc-vim
let g:coc_global_extensions = ['coc-snippets', 'coc-yank', 'coc-eslint', 'coc-word'
      \, 'coc-sh', 'coc-html', 'coc-css', 'coc-tsserver', 'coc-syntax', 'coc-yaml'
      \, 'coc-angular', 'coc-spell-checker', 'coc-yaml', 'coc-prettier', 'coc-marketplace'
      \, 'coc-emmet', 'coc-fzf-preview', 'coc-json', 'coc-lists', 'coc-highlight', 'coc-pyright'
      \]

" use coc-css for scss file
autocmd FileType scss setl iskeyword+=@-@

function! s:show_documentation()
  if &filetype == 'vim'
    execute 'h '.expand('<cword>')
  else
    call CocActionAsync('doHover')
  endif
endfunction

vmap <leader>a <Plug>(coc-codeaction-selected)
nmap <leader>a <Plug>(coc-codeaction-selected)

nnoremap <silent> K :call <SID>show_documentation()<CR>
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
" nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
imap <C-l> <Plug>(coc-snippets-expand)
nmap <silent> <leader>ep <Plug>(coc-diagnostic-prev)
nmap <silent> <leader>en <Plug>(coc-diagnostic-next)
nmap <leader>f :CocCommand prettier.formatFile<CR>

set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" map <F1> <Esc>
" imap <F1> <Esc>

" set lazyredraw

let g:vrc_output_buffer_name = '__VRC_OUTPUT.<filetype>'


set laststatus=0

let g:fugitive_gitlab_domains = ['https://global.gitlab.com']

lua << EOF
require("bufferline").setup {
  options = {
    offsets = {{filetype = "NvimTree", text = "File Explorer", text_align = "left" }},
    diagnostics = "coc",
    separator_style = "slant",
    always_show_bufferline = false,
  enforce_regular_tabs = true,
      show_close_icon = false
  }}
EOF

let g:solarized_termtrans=1
set cursorline
if exists('g:GuiLoaded')
  Guifont! Iosevka:h13
endif

" lua <<EOF
" require("onedark").setup({
"   transparent=false,
"   hide_inactive_statusline = true,
"   highlight_linenumber = true
" })
" EOF

colorscheme gruvbox-material
let g:airline_theme = 'gruvbox_material'
" hi Normal guibg=NONE ctermbg=NONE
" hi EndOfBuffer guibg=NONE ctermbg=NONE

lua <<EOF
require'nvim-treesitter.configs'.setup {
  ensure_installed = { "c", "lua", "vim", "vimdoc", "query" },
  highlight = {
    enable = true,
    -- Setting this to true will run `:h syntax` and tree-sitter at the same time.
    -- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).
    -- Using this option may slow down your editor, and you may see some duplicate highlights.
    -- Instead of true it can also be a list of languages
    additional_vim_regex_highlighting = false,
  },
}
EOF

lua require('Comment').setup()

lua <<EOF
require'nvim-tree'.setup {
  disable_netrw = false,
  renderer = {
    highlight_git = false,
    icons = {
      show = {
        git= false,
        folder= true,
        file= true,
        folder_arrow= true,
        }
      }
    },
  update_focused_file = {
    enable = true,
  },
  filters = {
    dotfiles = true
    }
  }
EOF

let g:transparent_enabled = v:true

" gutter is the same color as where your line numbers show up is the following:
" https://stackoverflow.com/questions/15277241/changing-vim-gutter-color
" highlight SignColumn guibg=NONE
" highlight GitGutterAdd    guifg=#98971a ctermfg=2 guibg=NONE 
" highlight GitGutterChange guifg=#d79921 ctermfg=3 guibg=NONE
" highlight GitGutterDelete guifg=#cc241d ctermfg=1 guibg=NONE
" highlight CocErrorSign guifg=#cc241d ctermfg=1 guibg=NONE
" highlight CocInfoSign guifg=#cc241d ctermfg=1 guibg=NONE

" highlight GruvboxRedSign guibg=NONE
let g:gitgutter_sign_added = emoji#for('small_blue_diamond')
let g:gitgutter_sign_modified = emoji#for('small_orange_diamond')
let g:gitgutter_sign_removed = emoji#for('small_red_triangle')
let g:gitgutter_sign_modified_removed = emoji#for('collision')

" let bg_current = get(nvim_get_hl_by_name('Normal',     1), 'background', '#000000')
" let bg_visible = get(nvim_get_hl_by_name('TabLineSel', 1), 'background', '#000000')
" let bg_inactive = get(nvim_get_hl_by_name('TabLine',   1), 'background', '#000000')

" For the current active buffer
" hi default link BufferCurrent      Normal
" For the current active buffer when modified
" hi default link BufferCurrentMod   Normal
" For the current active buffer icon
" hi default link BufferCurrentSign  Normal
" For the current active buffer target when buffer-picking
" exe 'hi default BufferCurrentTarget   guifg=red gui=bold guibg=' . bg_current

" For buffers visible but not the current one
" hi default link BufferVisible      TabLineSel
" hi default link BufferVisibleMod   TabLineSel
" hi default link BufferVisibleSign  TabLineSel
" exe 'hi default BufferVisibleTarget   guifg=red gui=bold guibg=' . bg_visible

" For buffers invisible buffers
" hi default link BufferInactive     TabLine
" hi default link BufferInactiveMod  TabLine
" hi default link BufferInactiveSign TabLine
" exe 'hi default BufferInactiveTarget   guifg=red gui=bold guibg=' . bg_inactive
"
let s:hidden_all = 0
function! ToggleHiddenAll()
    if s:hidden_all  == 0
        let s:hidden_all = 1
        set noshowmode
        set noruler
        set laststatus=0
        set noshowcmd
    else
        let s:hidden_all = 0
        set showmode
        set ruler
        set laststatus=2
        set showcmd
    endif
endfunction
nnoremap <S-h> :call ToggleHiddenAll()<CR>

lua <<EOF
require('neoscroll').setup({
    -- All these keys will be mapped to their corresponding default scrolling animation
    mappings = {'<C-u>', '<C-d>', '<C-b>', '<C-f>',
                '<C-y>', '<C-e>', 'zt', 'zz', 'zb'},
    hide_cursor = true,          -- Hide cursor while scrolling
    stop_eof = true,             -- Stop at <EOF> when scrolling downwards
    use_local_scrolloff = false, -- Use the local scope of scrolloff instead of the global scope
    respect_scrolloff = false,   -- Stop scrolling when the cursor reaches the scrolloff margin of the file
    cursor_scrolls_alone = true, -- The cursor will keep on scrolling even if the window cannot scroll further
    easing_function = nil,        -- Default easing function
    pre_hook = nil,              -- Function to run before the scrolling animation starts
    post_hook = nil,              -- Function to run after the scrolling animation ends
})

require("telescope").load_extension "frecency"
require("telescope").setup({
  defaults = {
    path_display = {"smart"}
  }
})
EOF


lua << EOF
require('auto-session').setup {
  log_level = 'error',
  -- auto_session_enable_last_session = true,
  -- auto_session_enabled = true,
  -- auto_save_enabled = true,
  -- auto_restore_enabled = true,
  auto_session_use_git_branch = true,
}
EOF

let g:codeium_no_map_tab = 1
imap <script><silent><nowait><expr> <M-CR> codeium#Accept()

let g:lazygit_use_neovim_remote = 1
